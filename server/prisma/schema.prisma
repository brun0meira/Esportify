generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  hashedPassword   String
  admin            Boolean           @default(false)
  name             String
  cpf              String            @unique
  rg               String            @unique
  address          String
  score            Int               @default(0)
  lastLogin        String            @default("")
  interests        String[]
  eventsAttended   String[]
  purchases        String[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  hashedRt         String?

  // Relações
  documents        Document[]
  socialAccounts   SocialAccount[]
  chatRooms        ChatRoom[]        @relation("ChatRoomMembers")
  createdRooms     ChatRoom[]        @relation("ChatRoomCreator")
  messages         ChatMessage[]
  chatbotMessages  ChatbotMessage[]
  chatbotSessions  ChatbotSession[]
}

model Document {
  id        String   @id @default(uuid())
  url       String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model SocialAccount {
  id        String   @id @default(uuid())
  platform  String
  username  String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ChatRoom {
  id          String        @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean       @default(true)
  isMatchChat Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relações
  messages    ChatMessage[]
  members     User[]        @relation("ChatRoomMembers")
  createdBy   User          @relation("ChatRoomCreator", fields: [createdById], references: [id])
  createdById String

  match       Match?        @relation("MatchChatRoom")
}

model ChatMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relações
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Match {
  id            String     @id @default(uuid())
  opponent      String
  date          DateTime
  isHomeGame    Boolean    @default(false)
  tournament    String?
  scoreFURIA    Int?
  scoreOpponent Int?
  status        MatchStatus @default(UPCOMING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  liveChatId    String?     @unique
  liveChat      ChatRoom?   @relation("MatchChatRoom", fields: [liveChatId], references: [id])
}

model ChatbotMessage {
  id        String   @id @default(uuid())
  content   String
  isBot     Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relações
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  
  session   ChatbotSession @relation(fields: [sessionId], references: [id])
  sessionId String
}

model ChatbotSession {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relações
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  
  messages  ChatbotMessage[]
}

enum MatchStatus {
  UPCOMING
  LIVE
  FINISHED
  POSTPONED
}